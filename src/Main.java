import java.io.File;import java.io.IOException;import game.Game;import lenz.htw.bogapr.Move;import lenz.htw.bogapr.net.NetworkClient;import model.Stone;import javax.imageio.ImageIO;import static java.lang.Thread.sleep;public class Main {    public static void main(String args[]) throws InterruptedException {        // java -Djava.library.path=lib/native -jar bogapr.jar        Game game = new Game(Stone.RED);        //game.moveStone(new Move(0,1, 0, 4));        Move move = game.calculateBestMove();    }        /*        try {            NetworkClient networkClient = new NetworkClient(null, "PLAYER", ImageIO.read(new File("meinLogo.png")));            int networkLateny = networkClient.getExpectedNetworkLatencyInMilliseconds();            int timeLimit = networkClient.getTimeLimitInSeconds();            int playerNumber = networkClient.getMyPlayerNumber();            // TODO: fix order of playernumber -> stone color            Stone playerColor = (playerNumber == 0) ? Stone.RED :                                (playerNumber == 1) ? Stone.GREEN : Stone.BLUE;            Game game = new Game(playerColor);            long latency = (timeLimit*1000)-(networkLateny*2);            Thread calcMoveThread = new Thread () {                @Override                public void run()  {                    try {                        game.calculateBestMove();                        // TODO sleep(latency);                        sleep(30000);                    }                    catch(InterruptedException e) {                        System.out.println(System.currentTimeMillis());                        e.printStackTrace();                    }                    finally {                        Move move = game.getNextMove();                        System.out.println("sending from: "+move.fromX+" "+move.fromY+" to: "+move.toX+" "+move.toY);                        networkClient.sendMove(move);                        System.out.println("Retrieve solution from Game");                    }                }            };            System.out.println("Stone color is: "+game.getStoneColor());            for (; ; ) {                Move receiveMove;                while ((receiveMove = networkClient.receiveMove()) != null) {                    System.out.println("received move: fromX="+ receiveMove.fromX+" fromY="+ receiveMove.fromY+" toX="+receiveMove.toX+" toY="+receiveMove.toY);                    //Zug in meine Brettrepräsentation einarbeiten                    game.moveStone(receiveMove);                }                calcMoveThread.start();            }        }        catch (IOException e) {            System.out.println(e);            throw new RuntimeException("Connection ended!", e);        }    }        /*        TODO:        Bewertungfkt.        Spielbaum Züge: Gegnerzug darf zweimal ziehen, dan zwei Gegner - in Spielbaum nur ein Gegner        Zeitabfrage - Threads         */}